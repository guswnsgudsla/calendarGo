/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.4
 * Generated at: 2025-04-19 12:44:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.List;
import com.proj.calendar.vo.CalendarGoVO;

public final class calendarGo_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(6);
    _jspx_dependants.put("/WEB-INF/lib/spring-webmvc-6.2.5.jar", Long.valueOf(1744680989389L));
    _jspx_dependants.put("jar:file:/C:/sts-4.29.1.RELEASE/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/calProj/WEB-INF/lib/jakarta.servlet.jsp.jstl-3.0.1.jar!/META-INF/c-1_2.tld", Long.valueOf(1664421078000L));
    _jspx_dependants.put("/WEB-INF/lib/jakarta.servlet.jsp.jstl-3.0.1.jar", Long.valueOf(1744694381965L));
    _jspx_dependants.put("jar:file:/C:/sts-4.29.1.RELEASE/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/calProj/WEB-INF/lib/jakarta.servlet.jsp.jstl-3.0.1.jar!/META-INF/fmt-1_1.tld", Long.valueOf(1664421078000L));
    _jspx_dependants.put("jar:file:/C:/sts-4.29.1.RELEASE/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/calProj/WEB-INF/lib/spring-webmvc-6.2.5.jar!/META-INF/spring.tld", Long.valueOf(1742372404000L));
    _jspx_dependants.put("jar:file:/C:/sts-4.29.1.RELEASE/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/calProj/WEB-INF/lib/jakarta.servlet.jsp.jstl-3.0.1.jar!/META-INF/fn-1_1.tld", Long.valueOf(1664421078000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.proj.calendar.vo.CalendarGoVO");
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fif_0026_005ftest;

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.release();
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.release();
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("	<meta charset=\"UTF-8\">\r\n");
      out.write("	<script src=\"/js/jquery-3.7.1.js\"></script>\r\n");
      out.write("	<script src=\"/js/bootstrap.min.js\"></script>\r\n");
      out.write("	<script src=\"/js/index.global.min.js\"></script>\r\n");
      out.write("	<link  href=\"/css/calMain.css\" rel=\"stylesheet\"/>\r\n");
      out.write("	<link  href=\"/css/bootstrap.min.css\" rel=\"stylesheet\"/>\r\n");
      out.write("	\r\n");
      out.write("	<!-- 카톡공유 -->\r\n");
      out.write("	<script src=\"https://t1.kakaocdn.net/kakao_js_sdk/2.7.4/kakao.min.js\" integrity=\"sha384-DKYJZ8NLiK8MN4/C5P2dtSmLQ4KwPaoqAfyA/DfmEc1VDxu4yyC7wy6K1Hs90nka\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("	<title>Calendar</title>\r\n");
      out.write("	\r\n");
      out.write("	<script>\r\n");
      out.write("	/* 카톡공유 */\r\n");
      out.write("	Kakao.init('dd98e06da22cff132d31a032d8c56655'); // 사용하려는 앱의 JavaScript 키 입력\r\n");
      out.write("\r\n");
      out.write("	document.addEventListener('DOMContentLoaded', function() {\r\n");
      out.write("		var vId    = '';\r\n");
      out.write("		var vStrDt = '';\r\n");
      out.write("		var vEndDt = '';\r\n");
      out.write("		var vCont  = '';\r\n");
      out.write("		\r\n");
      out.write("		var calendarEl = document.getElementById('calendar');\r\n");
      out.write("		var calendar = new FullCalendar.Calendar(calendarEl, {\r\n");
      out.write("			initialView: 'dayGridMonth',\r\n");
      out.write("			selectable: true, //선택가능\r\n");
      out.write("			dayMaxEvents: 3, //more버튼\r\n");
      out.write("			eventOrder : 'displayOrder', \r\n");
      out.write("			headerToolbar: { //header 디자인\r\n");
      out.write("				start: 'prev',\r\n");
      out.write("				center: 'title',\r\n");
      out.write("				end: 'next'\r\n");
      out.write("			},\r\n");
      out.write("			footerToolbar: { //footer 디자인\r\n");
      out.write("				start: 'today',\r\n");
      out.write("				center: 'addAniversButton',\r\n");
      out.write("				end: 'addCalButton'\r\n");
      out.write("			},\r\n");
      out.write("			events : [ //일정 불러오기\r\n");
      out.write("				");
List<CalendarGoVO> calList = (List<CalendarGoVO>) request.getAttribute("calList");
      out.write("\r\n");
      out.write("				");
for (CalendarGoVO vo : calList) {
      out.write("\r\n");
      out.write("					{\r\n");
      out.write("						id:'");
      out.print(vo.getCalId());
      out.write("',\r\n");
      out.write("						title: '");
      out.print(vo.getCalCont());
      out.write("',\r\n");
      out.write("						start: '");
      out.print(vo.getCalStrDate());
      out.write("',\r\n");
      out.write("						end: '");
      out.print(vo.getCalEndDate());
      out.write("',\r\n");
      out.write("						");
if (vo.getCalAnvYn().equals("Y")) {
      out.write("\r\n");
      out.write("							color: '#3c8fe2'\r\n");
      out.write("						");
}else { 
      out.write("\r\n");
      out.write("						color: '#1d3a57'\r\n");
      out.write("						");
}
      out.write(",\r\n");
      out.write("						description: '");
      out.print(vo.getCalAnvYn());
      out.write("'\r\n");
      out.write("						\r\n");
      out.write("					},\r\n");
      out.write("				");
}
      out.write("\r\n");
      out.write("			],\r\n");
      out.write("			eventClick: function(info) { //일정 선택 시 기능\r\n");
      out.write("				//공휴일인지아닌지\r\n");
      out.write("				var vAnivYn = info.event.extendedProps.description;\r\n");
      out.write("				\r\n");
      out.write("				// 하루 빼기\r\n");
      out.write("				var vEndDate = new Date(info.event.endStr);\r\n");
      out.write("				vEndDate.setDate(vEndDate.getDate() - 1);\r\n");
      out.write("				var year = vEndDate.getFullYear();\r\n");
      out.write("				var month = String(vEndDate.getMonth() + 1).padStart(2, '0'); // 월은 0부터 시작\r\n");
      out.write("				var day = String(vEndDate.getDate()).padStart(2, '0');\r\n");
      out.write("				var newDate = year+'-'+month+'-'+day;\r\n");
      out.write("				\r\n");
      out.write("				if (vAnivYn == 'Y') {\r\n");
      out.write("					$('#calendar_str_date').val(info.event.startStr);\r\n");
      out.write("					$('#calendar_str_date').addClass('disableGo');\r\n");
      out.write("					$('#calendar_end_date').val(newDate);\r\n");
      out.write("					$('#calendar_end_date').addClass('disableGo');\r\n");
      out.write("					$('#calendar_cont').val(info.event.title);\r\n");
      out.write("					\r\n");
      out.write("					$('#shareCalendar').css('display', 'block');\r\n");
      out.write("					$('#addCalendar').css('display', 'none');\r\n");
      out.write("					$('#editCalendar').css('display', 'none');\r\n");
      out.write("					$('#delCalendar').css('display', 'none');\r\n");
      out.write("				}else {\r\n");
      out.write("					$('#calendar_str_date').removeClass('disableGo');\r\n");
      out.write("					$('#calendar_str_date').val(info.event.startStr);\r\n");
      out.write("					$('#calendar_end_date').removeClass('disableGo');\r\n");
      out.write("					$('#calendar_end_date').val(newDate);\r\n");
      out.write("					$('#calendar_cont').val(info.event.title);\r\n");
      out.write("					vId = info.event.id;\r\n");
      out.write("					\r\n");
      out.write("					$('#shareCalendar').css('display', 'block');\r\n");
      out.write("					$('#addCalendar').css('display', 'none');\r\n");
      out.write("					$('#editCalendar').css('display', 'block');\r\n");
      out.write("					$('#delCalendar').css('display', 'block');\r\n");
      out.write("				}\r\n");
      out.write("				$('#calendarModal').modal('show');\r\n");
      out.write("			},\r\n");
      out.write("			select: function(info) { //빈칸 선택 시 기능\r\n");
      out.write("				var selDate = info.startStr; //선택한날짜\r\n");
      out.write("				\r\n");
      out.write("				$('#calendar_str_date').val(selDate);\r\n");
      out.write("				$('#calendar_str_date').addClass('disableGo');\r\n");
      out.write("				$('#calendar_end_date').val(selDate);\r\n");
      out.write("				$('#calendar_end_date').addClass('disableGo');\r\n");
      out.write("				$('#calendar_cont').val('');\r\n");
      out.write("				\r\n");
      out.write("				$('#shareCalendar').css('display', 'contents');\r\n");
      out.write("				$('#addCalendar').css('display', 'block');\r\n");
      out.write("				$('#editCalendar').css('display', 'none');\r\n");
      out.write("				$('#delCalendar').css('display', 'none');\r\n");
      out.write("				$('#calendarModal').modal('show');\r\n");
      out.write("			},\r\n");
      out.write("			customButtons: { //일정추가버튼 기능\r\n");
      out.write("				addCalButton: {\r\n");
      out.write("					text: '일정추가',\r\n");
      out.write("					click: function() {\r\n");
      out.write("						$('#calendar_str_date').val('');\r\n");
      out.write("						$('#calendar_str_date').removeClass('disableGo');\r\n");
      out.write("						$('#calendar_end_date').val('');\r\n");
      out.write("						$('#calendar_end_date').removeClass('disableGo');\r\n");
      out.write("						$('#calendar_cont').val('');\r\n");
      out.write("						\r\n");
      out.write("						$('#shareCalendar').css('display', 'contents');\r\n");
      out.write("						$('#addCalendar').css('display', 'block');\r\n");
      out.write("						$('#editCalendar').css('display', 'none');\r\n");
      out.write("						$('#delCalendar').css('display', 'none');\r\n");
      out.write("						$('#calendarModal').modal('show');\r\n");
      out.write("					}\r\n");
      out.write("				},\r\n");
      out.write("				addAniversButton: {\r\n");
      out.write("					text: '공휴일추가',\r\n");
      out.write("					click: function() {\r\n");
      out.write("						$('#selAnivers option:eq(0)').prop(\"selected\", true);\r\n");
      out.write("						\r\n");
      out.write("						$('#aniversModal').modal('show');\r\n");
      out.write("					}\r\n");
      out.write("				}\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		//일정_validation\r\n");
      out.write("		function calValidation() {\r\n");
      out.write("			vStrDt = $('#calendar_str_date').val();\r\n");
      out.write("			vEndDt = $('#calendar_end_date').val();\r\n");
      out.write("			vCont  = $('#calendar_cont').val();\r\n");
      out.write("\r\n");
      out.write("			//내용 입력 여부 확인\r\n");
      out.write("			if (vStrDt == '' || vStrDt == null) {\r\n");
      out.write("				alert('시작 날짜를 입력하세요.');\r\n");
      out.write("				return false;\r\n");
      out.write("			}else if (vEndDt == '' || vEndDt == null) {\r\n");
      out.write("				alert('종료 날짜를 입력하세요.');\r\n");
      out.write("				return false;\r\n");
      out.write("			}else if (vCont == '' || vCont == null) {\r\n");
      out.write("				alert('일정 내용을 입력하세요.');\r\n");
      out.write("				return false;\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			//validation\r\n");
      out.write("			if (new Date(vEndDt) - new Date(vStrDt) < 0) {\r\n");
      out.write("				alert('일정 종료일이 일정 시작일보다 먼저입니다.');\r\n");
      out.write("				return false;\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		//일정_전송\r\n");
      out.write("		function sendCalendar(url, data, type) {\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				type: \"POST\",\r\n");
      out.write("				url: url,\r\n");
      out.write("				data: data,\r\n");
      out.write("				success: function(returnData) {\r\n");
      out.write("					if (returnData == 'success') {\r\n");
      out.write("						alert(\"일정이 \"+type+\"되었습니다.\");\r\n");
      out.write("						window.location.reload();\r\n");
      out.write("					}else {\r\n");
      out.write("						alert(\"일정\"+type+\"에 실패하였습니다. 재시도하여주시기 바랍니다.\");\r\n");
      out.write("					}\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		//일정추가\r\n");
      out.write("		$('#addCalendar').click( function(){\r\n");
      out.write("			//일정_validation\r\n");
      out.write("			calValidation();\r\n");
      out.write("			\r\n");
      out.write("			//일정_전송\r\n");
      out.write("			var data = {\r\n");
      out.write("				vStrDt: vStrDt,\r\n");
      out.write("				vEndDt: vEndDt,\r\n");
      out.write("				vCont: vCont\r\n");
      out.write("			};\r\n");
      out.write("			sendCalendar('/calendarAdd.do', data, '등록');\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		//일정수정\r\n");
      out.write("		$('#editCalendar').click( function(){\r\n");
      out.write("			//일정_validation\r\n");
      out.write("			calValidation();\r\n");
      out.write("			\r\n");
      out.write("			//일정_전송\r\n");
      out.write("			var data = {\r\n");
      out.write("				vCalId: vId,\r\n");
      out.write("				vStrDt: vStrDt,\r\n");
      out.write("				vEndDt: vEndDt,\r\n");
      out.write("				vCont: vCont\r\n");
      out.write("			};\r\n");
      out.write("			sendCalendar('/calendarEdit.do', data, '수정');\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		//일정삭제\r\n");
      out.write("		$('#delCalendar').click( function(){\r\n");
      out.write("			calValidation();\r\n");
      out.write("			\r\n");
      out.write("			var answer = confirm(\"일정을 삭제하시겠습니까?\");\r\n");
      out.write("			if(answer) {\r\n");
      out.write("				var data = {\r\n");
      out.write("					vCalId: vId\r\n");
      out.write("				};\r\n");
      out.write("				sendCalendar('/calendarDel.do', data, '삭제');\r\n");
      out.write("			} else {\r\n");
      out.write("				return false;\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		//일정공유\r\n");
      out.write("		$('#shareCalendar').click( function(){\r\n");
      out.write("			calValidation();\r\n");
      out.write("			\r\n");
      out.write("			var vShareText = '[' + vStrDt + ' ~ ' + vEndDt + '] ' + vCont;\r\n");
      out.write("			Kakao.Share.sendDefault({\r\n");
      out.write("				objectType: 'text',\r\n");
      out.write("				text: vShareText,\r\n");
      out.write("				link: {\r\n");
      out.write("					webUrl: 'http://localhost:8008'\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		//공휴일 추가\r\n");
      out.write("		$('#addAnivers').click( function(){\r\n");
      out.write("			var selVal = $(\"#selAnivers option:selected\").val();\r\n");
      out.write("			var selYn  = $(\"#selAnivers>option:selected\").attr('data-yn');\r\n");
      out.write("			\r\n");
      out.write("			if (selYn == 'Y') {\r\n");
      out.write("				alert(\"이미 추가되어있는 공휴일 년도입니다.\");\r\n");
      out.write("				return false;\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			var answer = confirm(selVal+\"년도의 공휴일을 불러오시겠습니까?\");\r\n");
      out.write("			if (answer) {\r\n");
      out.write("				$.ajax({\r\n");
      out.write("					type: \"POST\",\r\n");
      out.write("					url: \"/addAnivers.do\",\r\n");
      out.write("					data: {\r\n");
      out.write("						yearData: selVal\r\n");
      out.write("					},\r\n");
      out.write("					success: function(returnData) {\r\n");
      out.write("						if (returnData == 'success') {\r\n");
      out.write("							alert(\"공휴일이 추가되었습니다.\");\r\n");
      out.write("							window.location.reload();\r\n");
      out.write("						}else if (returnData == \"duplicate\") {\r\n");
      out.write("							alert(\"이미 등록된 자료입니다. 다른년도를 선택해주시기 바랍니다.\");\r\n");
      out.write("						} else {\r\n");
      out.write("							alert(\"공휴일추가에 실패하였습니다. 재시도하여주시기 바랍니다.\");\r\n");
      out.write("						}\r\n");
      out.write("					}\r\n");
      out.write("				});\r\n");
      out.write("			}else {\r\n");
      out.write("				return false;\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("\r\n");
      out.write("		//공휴일 삭제\r\n");
      out.write("		$('#delAnivers').click( function(){\r\n");
      out.write("			var selVal = $(\"#selAnivers option:selected\").val();\r\n");
      out.write("			var selYn  = $(\"#selAnivers>option:selected\").attr('data-yn');\r\n");
      out.write("			\r\n");
      out.write("			if (selYn == 'N') {\r\n");
      out.write("				alert(\"삭제할 데이터가 없습니다.\");\r\n");
      out.write("				return false;\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			var answer = confirm(selVal+\"년도의 공휴일을 삭제하시겠습니까?\");\r\n");
      out.write("			if (answer) {\r\n");
      out.write("				$.ajax({\r\n");
      out.write("					type: \"POST\",\r\n");
      out.write("					url: \"/calendarAnivDel.do\",\r\n");
      out.write("					data: {\r\n");
      out.write("						yearData: selVal\r\n");
      out.write("					},\r\n");
      out.write("					success: function(returnData) {\r\n");
      out.write("						if (returnData == 'success') {\r\n");
      out.write("							alert(\"해당년도 공휴일이 삭제되었습니다.\");\r\n");
      out.write("							window.location.reload();\r\n");
      out.write("						}else {\r\n");
      out.write("							alert(\"공휴일삭제에 실패하였습니다. 재시도하여주시기 바랍니다.\");\r\n");
      out.write("						}\r\n");
      out.write("					}\r\n");
      out.write("				});\r\n");
      out.write("			}else {\r\n");
      out.write("				return false;\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		calendar.render();\r\n");
      out.write("	});\r\n");
      out.write("	</script>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("	<div id=\"calendar_wrap\">\r\n");
      out.write("		<div id='calendar'></div>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("	<div class=\"modal fade\" id=\"calendarModal\" tabindex=\"20\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n");
      out.write("		<div class=\"modal-dialog\" role=\"document\">\r\n");
      out.write("			<div class=\"modal-content\">\r\n");
      out.write("				<div class=\"modal-header\">\r\n");
      out.write("					<h5 class=\"modal-title\" id=\"exampleModalLabel\">일정 확인</h5>\r\n");
      out.write("				</div>\r\n");
      out.write("				<div class=\"modal-body\">\r\n");
      out.write("					<div class=\"form-group\">\r\n");
      out.write("						<label for=\"taskId\" class=\"col-form-label\">시작 날짜</label>\r\n");
      out.write("						<input type=\"date\"  class=\"form-control\" id=\"calendar_str_date\" name=\"calendar_str_date\">\r\n");
      out.write("						<label for=\"taskId\" class=\"col-form-label\">종료 날짜</label>\r\n");
      out.write("						<input type=\"date\"  class=\"form-control\" id=\"calendar_end_date\" name=\"calendar_end_date\">\r\n");
      out.write("						<label for=\"taskId\" class=\"col-form-label\">일정 내용</label>\r\n");
      out.write("						<input type=\"text\"  class=\"form-control\" id=\"calendar_cont\" name=\"calendar_cont\">\r\n");
      out.write("					</div>\r\n");
      out.write("				</div>\r\n");
      out.write("				<div class=\"modal-footer justify-content-between\">\r\n");
      out.write("					<button type=\"button\" class=\"btn btn-info\" id=\"shareCalendar\" name=\"shareCalendar\">공유하기</button>\r\n");
      out.write("					<div class=\"left_right_align\">\r\n");
      out.write("						<button type=\"button\" class=\"btn btn-info\"    id=\"addCalendar\"   name=\"addCalendar\" >추가</button>\r\n");
      out.write("						<button type=\"button\" class=\"btn btn-warning\" id=\"editCalendar\"  name=\"editCalendar\">수정</button>\r\n");
      out.write("						<button type=\"button\" class=\"btn btn-danger\"  id=\"delCalendar\"   name=\"delCalendar\" >삭제</button>\r\n");
      out.write("						<button type=\"button\" class=\"btn btn-secondary\" id=\"sprintSettingModalClose\" name=\"sprintSettingModalClose\" data-dismiss=\"modal\">취소</button>\r\n");
      out.write("					</div>\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	<div class=\"modal fade\" id=\"aniversModal\" tabindex=\"20\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n");
      out.write("		<div class=\"modal-dialog\" role=\"document\">\r\n");
      out.write("			<div class=\"modal-content\">\r\n");
      out.write("				<div class=\"modal-header\">\r\n");
      out.write("					<h5 class=\"modal-title\" id=\"exampleModalLabel\">캘린더에 공휴일 추가하기</h5>\r\n");
      out.write("				</div>\r\n");
      out.write("				<div class=\"modal-body\">\r\n");
      out.write("					<div class=\"form-group\">\r\n");
      out.write("						<label for=\"taskId\" class=\"col-form-label\">선택년도</label>\r\n");
      out.write("						<select class=\"form-control\" id=\"selAnivers\" name=\"selAnivers\" aria-label=\"Default select example\">\r\n");
      out.write("							");
      if (_jspx_meth_c_005fforEach_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("						</select>\r\n");
      out.write("					</div>\r\n");
      out.write("				</div>\r\n");
      out.write("				<div class=\"modal-footer\">\r\n");
      out.write("					<button type=\"button\" class=\"btn btn-info\"      id=\"addAnivers\" name=\"addAnivers\">추가</button>\r\n");
      out.write("					<button type=\"button\" class=\"btn btn-danger\"    id=\"delAnivers\" name=\"delAnivers\">삭제</button>\r\n");
      out.write("					<button type=\"button\" class=\"btn btn-secondary\" id=\"sprintSettingModalClose\" name=\"sprintSettingModalClose\" data-dismiss=\"modal\">취소</button>\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fforEach_005f0(jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    jakarta.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fforEach_005f0.setParent(null);
    // /WEB-INF/views/jsp/calendarGo.jsp(364,7) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fforEach_005f0.setVar("result");
    // /WEB-INF/views/jsp/calendarGo.jsp(364,7) name = items type = jakarta.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
    _jspx_th_c_005fforEach_005f0.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/jsp/calendarGo.jsp(364,7) '${yearList}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${yearList}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
    int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
    try {
      int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
      if (_jspx_eval_c_005fforEach_005f0 != jakarta.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("							<option value=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${result.yearList}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("\" data-yn=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${result.yearYn }", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write('"');
          out.write('>');
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${result.yearList}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
          if (_jspx_meth_c_005fif_005f0(_jspx_th_c_005fforEach_005f0, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f0))
            return true;
          out.write("</option>\r\n");
          out.write("							");
          int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
          if (evalDoAfterBody != jakarta.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fforEach_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
    } finally {
      _jspx_th_c_005fforEach_005f0.doFinally();
    }
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
    return false;
  }

  private boolean _jspx_meth_c_005fif_005f0(jakarta.servlet.jsp.tagext.JspTag _jspx_th_c_005fforEach_005f0, jakarta.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f0)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    jakarta.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f0 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    _jspx_th_c_005fif_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fif_005f0.setParent((jakarta.servlet.jsp.tagext.Tag) _jspx_th_c_005fforEach_005f0);
    // /WEB-INF/views/jsp/calendarGo.jsp(365,88) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fif_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${result.yearYn eq 'Y' }", boolean.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
    int _jspx_eval_c_005fif_005f0 = _jspx_th_c_005fif_005f0.doStartTag();
    if (_jspx_eval_c_005fif_005f0 != jakarta.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("<span> (추가완료)</span>");
        int evalDoAfterBody = _jspx_th_c_005fif_005f0.doAfterBody();
        if (evalDoAfterBody != jakarta.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fif_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f0);
    return false;
  }
}
